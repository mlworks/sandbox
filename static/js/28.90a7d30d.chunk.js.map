{"version":3,"sources":["components/tabs/tab-button-sc.js","components/tabs/tab-button.js","components/tabs/tab-list-sc.js","components/tabs/tabs.js","utils/misc.js"],"names":["TabButtonSC","styled","Button","props","colors","accentRed","TabButton","id","isActive","label","targetId","onClick","tabButtonEl","useRef","useEffect","current","focus","aria-selected","aria-controls","ref","role","tabIndex","type","TabListSC","div","attrs","border","shorthand","Tabs","handleKeyPress","event","keyCode","setState","state","activeTab","count","this","React","Children","children","onKeyDown","map","child","index","normalizeLabel","cloneElement","labelledBy","Component","replace","toLowerCase"],"mappings":"2JAQMA,EAAcC,YAAOC,UAAPD,CAAH,0dAGA,SAAAE,GAAK,OAAKA,EAAM,iBAAmB,OAAS,WAkB3CC,SAAOC,WACF,SAAAF,GAAK,OAAKA,EAAM,iBAAmB,EAAI,KAM/CH,a,iCCpCf,kCAuCeM,UAjCG,SAAC,GAA8C,IAA7CC,EAA4C,EAA5CA,GAAIC,EAAwC,EAAxCA,SAAUC,EAA8B,EAA9BA,MAAOC,EAAuB,EAAvBA,SAAUC,EAAa,EAAbA,QAC3CC,EAAcC,iBAAO,MAQ3B,OANAC,qBAAU,WACJN,GACFI,EAAYG,QAAQC,UAErB,CAACR,IAGF,cAAC,UAAD,CACES,gBAAeT,EACfU,gBAAeR,EACfH,GAAIA,EACJY,IAAKP,EACLQ,KAAK,MACLC,SAAUb,EAAW,GAAK,EAC1Bc,KAAK,SACLX,QAASA,EARX,SAUGF,M,mECrBDc,EAAYtB,IAAOuB,IAAIC,MAAM,CACjCL,KAAM,WADUnB,CAAH,kDAGIyB,SAAOC,WAGXJ,a,6HCCTK,E,kDACJ,WAAYzB,GAAQ,IAAD,8BACjB,cAAMA,IAaR0B,eAAiB,SAAAC,GAGO,KAAlBA,EAAMC,SACR,EAAKC,UAAS,SAAAC,GAAK,MAAK,CACtBC,UAAWD,EAAMC,UAAY,IAAM,EAAKC,MAAQ,EAAIF,EAAMC,UAAY,MAMpD,KAAlBJ,EAAMC,SACR,EAAKC,UAAS,SAAAC,GAAK,MAAK,CACtBC,UAA+B,IAApBD,EAAMC,UAAkB,EAAKC,MAAQ,EAAIF,EAAMC,UAAY,OAxB1E,EAAKD,MAAQ,CACXC,UAAW,GAGb,EAAKC,MAAQ,EAPI,E,qDAUnB,WACEC,KAAKD,MAAQE,IAAMC,SAASH,MAAMC,KAAKjC,MAAMoC,Y,oBAqB/C,WAAU,IAAD,OACAA,EAAYH,KAAKjC,MAAjBoC,SACAL,EAAaE,KAAKH,MAAlBC,UAEP,OACE,sBAAKM,UAAWJ,KAAKP,eAArB,UACE,cAAC,UAAD,UACGQ,IAAMC,SAASG,IAAIF,GAAU,SAACG,EAAOC,GAAR,OAC5B,cAAC,UAAD,CACEpC,GAAE,UAAKqC,yBAAeF,EAAMvC,MAAMM,QAClCD,SAAUmC,IAAUT,EACpBzB,MAAOiC,EAAMvC,MAAMM,MACnBC,SAAQ,UAAKkC,yBAAeF,EAAMvC,MAAMM,OAAhC,QACRE,QAAS,kBAAM,EAAKqB,SAAS,CAACE,UAAWS,YAI9CN,IAAMC,SAASG,IAAIF,GAAU,SAACG,EAAOC,GAAR,OAC5BN,IAAMQ,aAAaH,EAAO,CACxBnC,GAAG,GAAD,OAAKqC,yBAAeF,EAAMvC,MAAMM,OAAhC,QACFD,SAAUmC,IAAUT,EACpBY,WAAW,GAAD,OAAKF,yBAAeF,EAAMvC,MAAMM,oB,GAtDnC4B,IAAMU,WAkEVnB,a,gCC9Ef,sDAAO,IAAMgB,EAAiB,SAAAnC,GAAK,OAAIA,EAAMuC,QAAQ,KAAM,KAAKC","file":"static/js/28.90a7d30d.chunk.js","sourcesContent":["import styled from 'styled-components'\n\n// Component\nimport Button from 'components/button'\n\n// Constants\nimport {colors} from 'constants/styles'\n\nconst TabButtonSC = styled(Button)`\n  position: relative;\n\n  font-weight: ${props => (props['aria-selected'] ? 'bold' : 'normal')};\n\n  &:hover {\n    background: none;\n\n    &::after {\n      transform: scale(1);\n    }\n  }\n\n  &::after {\n    content: '';\n    position: absolute;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    display: block;\n    height: 2px;\n    background: ${colors.accentRed};\n    transform: scale(${props => (props['aria-selected'] ? 1 : 0)});\n    transform-origin: bottom center;\n    transition: 0.1s cubic-bezier(0.25, 0.7, 0.01, 0.8) transform;\n  }\n`\n\nexport default TabButtonSC\n","import React, {useEffect, useRef} from 'react'\nimport PropTypes from 'prop-types'\n\n// SC\nimport TabButtonSC from './tab-button-sc'\n\nconst TabButton = ({id, isActive, label, targetId, onClick}) => {\n  const tabButtonEl = useRef(null)\n\n  useEffect(() => {\n    if (isActive) {\n      tabButtonEl.current.focus()\n    }\n  }, [isActive])\n\n  return (\n    <TabButtonSC\n      aria-selected={isActive}\n      aria-controls={targetId}\n      id={id}\n      ref={tabButtonEl}\n      role=\"tab\"\n      tabIndex={isActive ? 0 : -1}\n      type=\"button\"\n      onClick={onClick}\n    >\n      {label}\n    </TabButtonSC>\n  )\n}\n\nTabButton.propTypes = {\n  id: PropTypes.string,\n  isActive: PropTypes.bool,\n  label: PropTypes.string,\n  targetId: PropTypes.string,\n  onClick: PropTypes.func,\n}\n\nexport default TabButton\n","import styled from 'styled-components'\n\n// Constants\nimport {border} from 'constants/styles'\n\nconst TabListSC = styled.div.attrs({\n  role: 'tablist',\n})`\n  border-bottom: ${border.shorthand};\n`\n\nexport default TabListSC\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\n// Component\nimport TabButton from './tab-button'\n\n// SC\nimport TabListSC from './tab-list-sc'\n\n// Utils\nimport {normalizeLabel} from 'utils/misc'\n\nclass Tabs extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      activeTab: 0,\n    }\n\n    this.count = 0\n  }\n\n  componentDidMount() {\n    this.count = React.Children.count(this.props.children)\n  }\n\n  handleKeyPress = event => {\n    // Right Arrow (Advancing forward)\n    // Cycle focus back to first tab if you've reached the end\n    if (event.keyCode === 39) {\n      this.setState(state => ({\n        activeTab: state.activeTab + 1 === this.count ? 0 : state.activeTab + 1,\n      }))\n    }\n\n    // Left Arrow (Moving backwards)\n    // Cycle focus to last tab if you've reached the first tab\n    if (event.keyCode === 37) {\n      this.setState(state => ({\n        activeTab: state.activeTab === 0 ? this.count - 1 : state.activeTab - 1,\n      }))\n    }\n  }\n\n  render() {\n    const {children} = this.props\n    const {activeTab} = this.state\n\n    return (\n      <div onKeyDown={this.handleKeyPress}>\n        <TabListSC>\n          {React.Children.map(children, (child, index) => (\n            <TabButton\n              id={`${normalizeLabel(child.props.label)}`}\n              isActive={index === activeTab}\n              label={child.props.label}\n              targetId={`${normalizeLabel(child.props.label)}-tab`}\n              onClick={() => this.setState({activeTab: index})}\n            />\n          ))}\n        </TabListSC>\n        {React.Children.map(children, (child, index) =>\n          React.cloneElement(child, {\n            id: `${normalizeLabel(child.props.label)}-tab`,\n            isActive: index === activeTab,\n            labelledBy: `${normalizeLabel(child.props.label)}`,\n          })\n        )}\n      </div>\n    )\n  }\n}\n\nTabs.propTypes = {\n  children: PropTypes.node,\n}\n\nexport default Tabs\n","export const normalizeLabel = label => label.replace(/ /g, '-').toLowerCase()\n"],"sourceRoot":""}