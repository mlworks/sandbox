{"version":3,"sources":["components/carousel/carousel-scroller-sc.js","components/carousel/carousel-scroller.js"],"names":["CarouselScrollerSC","styled","FlexBox","attrs","props","style","transform","translateX","isDragActive","CarouselScroller","activeItem","children","onNextItem","onPrevItem","scrollerEl","useRef","refs","useState","setTranslateX","initialX","setInitialX","initialTranslateX","setInitialTranslateX","endX","setEndX","getEventX","event","test","type","touches","clientX","resetScrollPosition","current","offsetWidth","handleDragStart","handleDragMove","Math","round","handleDragEnd","delta","threshold","React","Children","count","abs","recalcSlidePosition","useEffect","window","addEventListener","removeEventListener","id","ref","onKeyDown","keyCode","onTouchStart","onTouchEnd","onTouchMove","onMouseDown","onMouseUp","onMouseMove","onMouseOut","onTransitionEnd","focus","map","child","index","createRef","cloneElement","role","tabIndex","onScrollToItem"],"mappings":"oOAKA,IAAMA,EAAqBC,YAAOC,WAASC,OAAM,SAAAC,GAAK,MAAK,CACzDC,MAAO,CACLC,UAAU,cAAD,OACPF,EAAMG,WAAN,WAA0C,EAApBH,EAAMG,WAA5B,MAAkD,IAD3C,SAFcN,CAAH,KAOR,SAAAG,GAAK,OACjBA,EAAMI,aACF,OACA,uDAGOR,a,6ECwGAS,UApHU,SAAC,GAAoD,IAAnDC,EAAkD,EAAlDA,WAAYC,EAAsC,EAAtCA,SAAUC,EAA4B,EAA5BA,WAAYC,EAAgB,EAAhBA,WACrDC,EAAaC,iBAAO,MACpBC,EAAO,GAF8D,EAIvCC,mBAAS,GAJ8B,mBAIpEV,EAJoE,KAIxDW,EAJwD,OAK3CD,mBAAS,MALkC,mBAKpEE,EALoE,KAK1DC,EAL0D,OAMzBH,mBAAS,MANgB,mBAMpEI,EANoE,KAMjDC,EANiD,OAOnDL,mBAAS,MAP0C,mBAOpEM,EAPoE,KAO9DC,EAP8D,KAqBrEC,EAAY,SAAAC,GAAK,MACrB,QAAQC,KAAKD,EAAME,MAAQF,EAAMG,QAAQ,GAAGC,QAAUJ,EAAMI,SAExDC,EAAsB,WAC1Bb,EAAcR,EAAaI,EAAWkB,QAAQC,aAC9Cb,EAAY,MACZI,EAAQ,OAEJU,EAAkB,SAAAR,GACtBN,EAAYK,EAAUC,IACtBJ,EAAqBf,IAEjB4B,EAAiB,SAAAT,GAGjBP,IACFD,EAAckB,KAAKC,MAAMhB,EAAoBF,EAAWM,EAAUC,KAClEF,EAAQC,EAAUC,MAGhBY,EAAgB,SAAAZ,GACpB,GAAKP,GAAaI,EAAlB,CAKA,IAAMgB,EAAQpB,EAAWI,EAEnBiB,EADgB1B,EAAWkB,QAAQC,YACP,EAG/BvB,EAAa,GAAK+B,IAAMC,SAASC,MAAMhC,IAAa4B,EAAQ,GAC7C,IAAf7B,GAAoB6B,EAAQ,GAC7BH,KAAKQ,IAAIL,IAAUC,EAEnBT,IACSQ,EAAQ,EACjB3B,IAEAC,IAGFO,EAAY,MACZI,EAAQ,WArBNO,KAwBEc,EAAsB,kBAAMd,KASlC,OAPAe,qBAAU,WAER,OADAC,OAAOC,iBAAiB,SAAUH,GAC3B,WACLE,OAAOE,oBAAoB,SAAUJ,OAKvC,kBAAC,UAAD,CACEK,GAAG,oBACH1C,eAAgBW,EAChBgC,IAAKrC,EACLP,WAAYA,EACZ6C,UAzEmB,SAAA1B,GAEC,KAAlBA,EAAM2B,SACRzC,IAIoB,KAAlBc,EAAM2B,SACRxC,KAkEAyC,aAAcpB,EACdqB,WAAYjB,EACZkB,YAAarB,EACbsB,YAAavB,EACbwB,UAAWpB,EACXqB,YAAaxB,EACbyB,WAAY7B,EACZ8B,gBAAiB,kBAAM7C,EAAKN,GAAYsB,QAAQ8B,UAE/CrB,IAAMC,SAASqB,IAAIpD,GAAU,SAACqD,EAAOC,GAEpC,OADAjD,EAAKiD,GAASxB,IAAMyB,YACbzB,IAAM0B,aAAaH,EAAO,CAC/B,cAAeC,IAAUvD,EACzB,kBAAkB,QAAlB,OAA2BuD,GAC3Bf,GAAG,SAAD,OAAWe,GACbG,KAAM,WACNC,SAAUJ,IAAUvD,EAAa,GAAK,EACtCyC,IAAKnC,EAAKiD,GACVK,eAAgB,kBACdpD,EAAc+C,EAAQnD,EAAWkB,QAAQC","file":"static/js/33.717c9de8.chunk.js","sourcesContent":["import styled from 'styled-components'\n\n// Component\nimport FlexBox from 'components/flex-box'\n\nconst CarouselScrollerSC = styled(FlexBox).attrs(props => ({\n  style: {\n    transform: `translateX(${\n      props.translateX ? `${props.translateX * -1}px` : '0'\n    })`,\n  },\n}))`\n  transition: ${props =>\n    props.isDragActive\n      ? 'none'\n      : '0.3s cubic-bezier(0.25, 0.7, 0.01, 0.8) transform'};\n`\n\nexport default CarouselScrollerSC\n","import React, {useEffect, useRef, useState} from 'react'\nimport PropTypes from 'prop-types'\n\n// SC\nimport CarouselScrollerSC from './carousel-scroller-sc'\n\nconst CarouselScroller = ({activeItem, children, onNextItem, onPrevItem}) => {\n  const scrollerEl = useRef(null)\n  const refs = []\n\n  const [translateX, setTranslateX] = useState(0)\n  const [initialX, setInitialX] = useState(null)\n  const [initialTranslateX, setInitialTranslateX] = useState(null)\n  const [endX, setEndX] = useState(null)\n\n  const handleKeyPress = event => {\n    // Right Arrow (Advancing forward)\n    if (event.keyCode === 39) {\n      onNextItem()\n    }\n\n    // Left Arrow (Moving backwards)\n    if (event.keyCode === 37) {\n      onPrevItem()\n    }\n  }\n\n  const getEventX = event =>\n    /touch/.test(event.type) ? event.touches[0].clientX : event.clientX\n\n  const resetScrollPosition = () => {\n    setTranslateX(activeItem * scrollerEl.current.offsetWidth)\n    setInitialX(null)\n    setEndX(null)\n  }\n  const handleDragStart = event => {\n    setInitialX(getEventX(event))\n    setInitialTranslateX(translateX)\n  }\n  const handleDragMove = event => {\n    // Also handles the mouse interactions so it\n    // mimics mobile's experience. Click and drag\n    if (initialX) {\n      setTranslateX(Math.round(initialTranslateX + initialX - getEventX(event)))\n      setEndX(getEventX(event))\n    }\n  }\n  const handleDragEnd = event => {\n    if (!initialX || !endX) {\n      resetScrollPosition()\n      return\n    }\n\n    const delta = initialX - endX\n    const scrollerWidth = scrollerEl.current.offsetWidth\n    const threshold = scrollerWidth / 4\n\n    if (\n      (activeItem + 1 >= React.Children.count(children) && delta > 0) ||\n      (activeItem === 0 && delta < 0) ||\n      Math.abs(delta) <= threshold\n    ) {\n      resetScrollPosition()\n    } else if (delta > 0) {\n      onNextItem()\n    } else {\n      onPrevItem()\n    }\n\n    setInitialX(null)\n    setEndX(null)\n  }\n\n  const recalcSlidePosition = () => resetScrollPosition()\n\n  useEffect(() => {\n    window.addEventListener('resize', recalcSlidePosition)\n    return () => {\n      window.removeEventListener('resize', recalcSlidePosition)\n    }\n  })\n\n  return (\n    <CarouselScrollerSC\n      id=\"carousel-scroller\"\n      isDragActive={!!initialX}\n      ref={scrollerEl}\n      translateX={translateX}\n      onKeyDown={handleKeyPress}\n      onTouchStart={handleDragStart}\n      onTouchEnd={handleDragEnd}\n      onTouchMove={handleDragMove}\n      onMouseDown={handleDragStart}\n      onMouseUp={handleDragEnd}\n      onMouseMove={handleDragMove}\n      onMouseOut={resetScrollPosition}\n      onTransitionEnd={() => refs[activeItem].current.focus()}\n    >\n      {React.Children.map(children, (child, index) => {\n        refs[index] = React.createRef()\n        return React.cloneElement(child, {\n          'aria-hidden': index === activeItem ? false : true,\n          'aria-labelledby': `item-${index}`,\n          id: `slide-${index}`,\n          role: 'tabpanel',\n          tabIndex: index === activeItem ? 0 : -1,\n          ref: refs[index],\n          onScrollToItem: () =>\n            setTranslateX(index * scrollerEl.current.offsetWidth),\n        })\n      })}\n    </CarouselScrollerSC>\n  )\n}\n\nCarouselScroller.propTypes = {\n  activeItem: PropTypes.number,\n  children: PropTypes.node,\n  onNextItem: PropTypes.func,\n  onPrevItem: PropTypes.func,\n}\n\nexport default CarouselScroller\n"],"sourceRoot":""}